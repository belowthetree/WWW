##
变量与常量
##
在程序的世界中，可以让计算机按照指令做很多事情，如进行数值计算、图像显示、语音对话、视频播放、天文计算、发送邮件、游戏绘图以及任何我们可以想象到的事情。要完成这些任务，程序需要使用数据，即承载信息的数字与字符。 
在计算机中,数据的性质和表示方式可能不同。所以需要将相同性质的数据归类,并用一定数据类型描述。任何数据对用户都呈现常量和变量两种形式。常量是指程序在运行时其值不能改变的量。常量不占内存,在程序运行时它作为操作对象直接出现在运算器的各种寄存器中。变量是指在程序运行时其值可以改变的量。变量的功能就是存储数据。 例子： 
#include<stdio.h>
int main()
{
    int year；
    year=2014；
    printf("Welcome to www.dotcpp.com！\n");
    return 0；
}    
其中year是一个int类型的变量，而2014是常量，即一个数字。 

变量的定义： 
在程序中使用的变量名、函数名、标号等统称为标识符。除库函数的函数名由系统定义外，其余都由用户自定义。 
C规定，标识符只能是字母(A～Z，a～z)、数字(0～9)、下划线(_)组成的字符串，并且其第一个字符必须是字母或下划线。且不能与C语言的关键字重名(关键字见下一节)。 
此外，在使用标识符时还必须注意以下几点： 
　　(1)标准C不限制标识符的长度，但它受各种版本的C 语言编译系统限制，同时也受到具体机器的限制。例如在某版本C 中规定标识符前八位有效，当两个标识符前八位相同时，则被认为是同一个标识符。 
　　(2)在标识符中，大小写是有区别的。例如CLANG和Clang 是两个不同的标识符。 
　　(3)标识符虽然可由程序员随意定义，但标识符是用于标识某个量的符号。因此，命名应尽量有相应的意义，以便阅读理解，做到“顾名思义”。
##

##
整型
##
整数是编程中常用的一种数据，C语言通常使用int来定义整数（int 是 integer 的简写），这在《大话C语言变量和数据类型》中已经进行了详细讲解。

在现代操作系统中，int 一般占用 4 个字节（Byte）的内存，共计 32 位（Bit）。如果不考虑正负数，当所有的位都为 1 时它的值最大，为 232-1 = 4,294,967,295 ≈ 43亿，这是一个很大的数，实际开发中很少用到，而诸如 1、99、12098 等较小的数使用频率反而较高。
使用 4 个字节保存较小的整数绰绰有余，会空闲出两三个字节来，这些字节就白白浪费掉了，不能再被其他数据使用。现在个人电脑的内存都比较大了，配置低的也有 2G，浪费一些内存不会带来明显的损失；而在C语言被发明的早期，或者在单片机和嵌入式系统中，内存都是非常稀缺的资源，所有的程序都在尽力节省内存。
反过来说，43 亿虽然已经很大，但要表示全球人口数量还是不够，必须要让整数占用更多的内存，才能表示更大的值，比如占用 6 个字节或者 8 个字节。
让整数占用更少的内存可以在 int 前边加 short，让整数占用更多的内存可以在 int 前边加 long，例如：
short int a = 10;
short int b, c = 99;
long int m = 102023;
long int n, p = 562131;
这样 a、b、c 只占用 2 个字节的内存，而 m、n、p 可能会占用 8 个字节的内存。
也可以将 int 省略，只写 short 和 long，如下所示：
short a = 10;
short b, c = 99;
long m = 102023;
long n, p = 562131;
这样的写法更加简洁，实际开发中常用。
int 是基本的整数类型，short 和 long 是在 int 的基础上进行的扩展，short 可以节省内存，long 可以容纳更大的值。
short、int、long 是C语言中常见的整数类型，其中 int 称为整型，short 称为短整型，long 称为长整型。
##

##
字符串
##
字符串是多个字符的集合，它们由" "包围，例如"http://c.biancheng.net"、"C语言中文网"。字符串中的字符在内存中按照次序、紧挨着排列，整个字符串占用一块连续的内存。
当然，字符串也可以只包含一个字符，例如"A"、"6"；不过为了操作方便，我们一般使用专门的字符类型来处理。
初学者经常用到的字符类型是 char，它的长度是 1，只能容纳 ASCII 码表中的字符，也就是英文字符。
要想处理汉语、日语、韩语等英文之外的字符，就得使用其他的字符类型，char 是做不到的，我们将在下节《在C语言中使用中文字符》中详细讲解。
字符的表示
字符类型由单引号' '包围，字符串由双引号" "包围。
下面的例子演示了如何给 char 类型的变量赋值：
//正确的写法
char a = '1';
char b = '$';
char c = 'X';
char d = ' ';  // 空格也是一个字符
//错误的写法
char x = '中';  //char 类型不能包含 ASCII 编码之外的字符
char y = 'Ａ';  //A 是一个全角字符
char z = "t";  //字符类型应该由单引号包围
说明：在字符集中，全角字符和半角字符对应的编号（或者说编码值）不同，是两个字符；ASCII 编码只定义了半角字符，没有定义全角字符。
字符的输出
输出 char 类型的字符有两种方法，分别是：
使用专门的字符输出函数 putchar；
使用通用的格式化输出函数 printf，char 对应的格式控制符是%c。
请看下面的演示：
#include <stdio.h>
int main() {
    char a = '1';
    char b = '$';
    char c = 'X';
    char d = ' ';
    //使用 putchar 输出
    putchar(a); putchar(d);
    putchar(b); putchar(d);
    putchar(c); putchar('\n');
    //使用 printf 输出
    printf("%c %c %c\n", a, b, c);
    return 0;
}
运行结果：
1 $ X
1 $ X
putchar 函数每次只能输出一个字符，输出多个字符需要调用多次。
字符与整数
我们知道，计算机在存储字符时并不是真的要存储字符实体，而是存储该字符在字符集中的编号（也可以叫编码值）。对于 char 类型来说，它实际上存储的就是字符的 ASCII 码。
无论在哪个字符集中，字符编号都是一个整数；从这个角度考虑，字符类型和整数类型本质上没有什么区别。
我们可以给字符类型赋值一个整数，或者以整数的形式输出字符类型。反过来，也可以给整数类型赋值一个字符，或者以字符的形式输出整数类型。
请看下面的例子：
#include <stdio.h>
int main()
{
    char a = 'E';
    char b = 70;
    int c = 71;
    int d = 'H';
    printf("a: %c, %d\n", a, a);
    printf("b: %c, %d\n", b, b);
    printf("c: %c, %d\n", c, c);
    printf("d: %c, %d\n", d, d);
    return 0;
}
输出结果：
a: E, 69
b: F, 70
c: G, 71
d: H, 72
在 ASCII 码表中，字符 'E'、'F'、'G'、'H' 对应的编号分别是 69、70、71、72。
a、b、c、d 实际上存储的都是整数：
当给 a、d 赋值一个字符时，字符会先转换成 ASCII 码再存储；
当给 b、c 赋值一个整数时，不需要任何转换，直接存储就可以；
当以 %c 输出 a、b、c、d 时，会根据 ASCII 码表将整数转换成对应的字符；
当以 %d 输出 a、b、c、d 时，不需要任何转换，直接输出就可以。
可以说，是 ASCII 码表将英文字符和整数关联了起来。
再谈字符串
前面我们讲到了字符串的概念，也讲到了字符串的输出，但是还没有讲如何用变量存储一个字符串。其实在C语言中没有专门的字符串类型，我们只能使用数组或者指针来间接地存储字符串。
在这里讲字符串很矛盾，虽然我们暂时还没有学到数组和指针，无法从原理上深入分析，但是字符串是常用的，又不得不说一下。所以本节我不会讲解太多，大家只需要死记硬背下面的两种表示形式即可：
char str1[] = "http://c.biancheng.net";
char *str2 = "C语言中文网";
str1 和 str2 是字符串的名字，后边的[ ]和前边的*是固定的写法。初学者暂时可以认为这两种存储方式是等价的，它们都可以通过专用的 puts 函数和通用的 printf 函数输出。
完整的字符串演示：
纯文本复制
#include <stdio.h>
int main()
{
    char web_url[] = "http://c.biancheng.net";
    char *web_name = "C语言中文网";
    puts(web_url);
    puts(web_name);
    printf("%s\n%s\n", web_url, web_name);
    return 0;
}
##